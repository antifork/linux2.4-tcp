Descrizione della procedura di ricezione di un pacchetto a livello di TCP
-------------------------------------------------------------------------
autore : Angelo Dell'Aera - buffer@users.sourceforge.net
--------------------------------------------------------


TCP Timers
----------

Vedere il sorgente tcp_timer.c.

Questa è l'inizializzazione dei 3 timer per il retransmit, per i delayed ACKs e per il keepalive 
probe (che da quanto stabilito da RFC dovrebbe avvenire dopo 2 ore di connessione idle). Ora 
notiamo che nell'inizializzazione l'handler 

- per il retransmit timer è tcp_write_timer() 
- per il delayed ACK timer è tcp_delack_timer()
- per il keepalive timer è tcp_keepalive_timer()

Questi 3 handler accettano come parametro la struct sock su cui dovranno operare e questo è 
normale a pensarci bene. Infatti, l'expiring di un timer è asincrono nel senso che potrebbe
verificarsi in un qualunque momento. Quindi serve dire all'handler su quale socket mettere
le mani. Tutto chiaro? Andiamo avanti.


void tcp_init_xmit_timers(struct sock *sk)
{
        struct tcp_opt *tp = &sk->tp_pinfo.af_tcp;

        init_timer(&tp->retransmit_timer);
        tp->retransmit_timer.function=&tcp_write_timer;
        tp->retransmit_timer.data = (unsigned long) sk;
        tp->pending = 0;

        init_timer(&tp->delack_timer);
        tp->delack_timer.function=&tcp_delack_timer;
	tp->delack_timer.data = (unsigned long) sk;
        tp->ack.pending = 0;

        init_timer(&sk->timer);
        sk->timer.function=&tcp_keepalive_timer;
        sk->timer.data = (unsigned long) sk;
}


Andiamo avanti dopo aver visto la timer_pending(). 


static inline int timer_pending (const struct timer_list * timer)
        {
                return timer->list.next != NULL;
        }


Non starò qui ad analizzare come funzionino i timer dinamici (per una trattazione esauriente potete 
vedere Cesati - Bovet "Understanding The Linux Kernel" ). Analizziamo la seguente funzione.


void tcp_clear_xmit_timers(struct sock *sk)
{
        struct tcp_opt *tp = &sk->tp_pinfo.af_tcp;

	/*
         * tp->pending memorizza il numero di ritrasmissioni schedulate. Iniziamo a porre
         * questo valore a 0.
	 */

        tp->pending = 0;

                /* Non ci sono ritrasmissioni da effettuare e abbiamo rimosso con successo il 
		 * timer..... bene allora possiamo concederci un bel atomic_dec sul refcnt di 
		 * sk...stessa storia per gli altri timer.
                 */

        if (timer_pending(&tp->retransmit_timer) &&
            del_timer(&tp->retransmit_timer))
                __sock_put(sk);

        tp->ack.pending = 0;
        tp->ack.blocked = 0;
        if (timer_pending(&tp->delack_timer) &&
            del_timer(&tp->delack_timer))
                __sock_put(sk);

        if(timer_pending(&sk->timer) && del_timer(&sk->timer))
                __sock_put(sk);
}


Vediamo gli handler lanciati alla scadenza dei timer. 


static void tcp_write_timer(unsigned long data)
{
        struct sock *sk = (struct sock*)data;
        struct tcp_opt *tp = &sk->tp_pinfo.af_tcp;
        int event;
	
	/*
         * Operazione critica. Acquisiamo uno spinlock con la bh_lock_sock() definita
         * come segue
         *
         * BH context may only use the following locking interface. */
         * #define bh_lock_sock(__sk)   spin_lock(&((__sk)->lock.slock))
         * #define bh_unlock_sock(__sk) spin_unlock(&((__sk)->lock.slock))
         * 
	 * Attenzione al ruolo di sk->lock.users perchè questo è fondamentalmente un
	 * semaforo il cui valore decide se il socket è lockato. Se il socket è lockato
	 * tramite questo semaforo ricorda che i segmenti in arrivo vanno in backlog
	 * queue (in pratica è lo stato del socket ad essere lockato). In questo caso
	 * il timer viene rischedulato tra circa 50 ms.
	 */

        bh_lock_sock(sk);
        if (sk->lock.users) {
                /* Try again later */
 		if (!mod_timer(&tp->retransmit_timer, jiffies + (HZ/20)))
                        sock_hold(sk);
                goto out_unlock;
        }

	/* 
	 * Se il socket è in stato closed oppure se non schedulati timer di ritrasmissione
	 * e/o di probing salta ad out. In out la sock_put() diminuisce automaticamente il
	 * refcnt del socket e se questo è 0 distrugge il sock. Per capire il senso niente
	 * di meglio di un commento ufficiale...
	 *
	 * * Socket reference counting postulates.
	 *
	 * * Each user of socket SHOULD hold a reference count.
	 * * Each access point to socket (an hash table bucket, reference from a list,
	 *   running timer, skb in flight MUST hold a reference count.
	 * * When reference count hits 0, it means it will never increase back.
	 * * When reference count hits 0, it means that no references from
	 *   outside exist to this socket and current process on current CPU
	 *   is last user and may/should destroy this socket.
	 * * sk_free is called from any context: process, BH, IRQ. When
	 *   it is called, socket has no references from outside -> sk_free
	 *   may release descendant resources allocated by the socket, but
	 *   to the time when it is called, socket is NOT referenced by any
	 *   hash tables, lists etc.
	 * * Packets, delivered from outside (from network or from another process)
	 *   and enqueued on receive/error queues SHOULD NOT grab reference count,
	 *   when they sit in queue. Otherwise, packets will leak to hole, when
	 *   socket is looked up by one cpu and unhasing is made by another CPU.
	 *   It is true for udp/raw, netlink (leak to receive and error queues), tcp
	 *   (leak to backlog). Packet socket does all the processing inside
	 *   BR_NETPROTO_LOCK, so that it has not this race condition. UNIX sockets
	 *   use separate SMP lock, so that they are prone too.
	 */


        if (sk->state == TCP_CLOSE || !tp->pending)
                goto out;


	/*
 	 * Se il timeout è spirato rischeduliamo il timer guardando il valore appropriato in
	 * tp->timeout e saltiamo ad out (vedi sopra).
	 */

        if ((long)(tp->timeout - jiffies) > 0) {
                if (!mod_timer(&tp->retransmit_timer, tp->timeout))
                        sock_hold(sk);
                goto out;
        }

        event = tp->pending;
        tp->pending = 0;

	/*
	 * A che si deve l'onore? Ad una ritrasmissione o a un probing?!
	 */

        switch (event) {
        case TCP_TIME_RETRANS:
                tcp_retransmit_timer(sk);
                break;
        case TCP_TIME_PROBE0:
                tcp_probe_timer(sk);
                break;
        }
        TCP_CHECK_TIMER(sk);

out:
        tcp_mem_reclaim(sk);
out_unlock:
        bh_unlock_sock(sk);
        sock_put(sk);
}



static void tcp_probe_timer(struct sock *sk)
{
        struct tcp_opt *tp = &sk->tp_pinfo.af_tcp;
        int max_probes;

        if (tp->packets_out || !tp->send_head) {
                tp->probes_out = 0;
                return;
        }

        /* *WARNING* RFC 1122 forbids this
         *
         * It doesn't AFAIK, because we kill the retransmit timer -AK
         *
         * FIXME: We ought not to do it, Solaris 2.5 actually has fixing
         * this behaviour in Solaris down as a bug fix. [AC]
         *
         * Let me to explain. probes_out is zeroed by incoming ACKs
         * even if they advertise zero window. Hence, connection is killed only
         * if we received no ACKs for normal connection timeout. It is not killed
         * only because window stays zero for some time, window may be zero
         * until armageddon and even later. We are in full accordance
         * with RFCs, only probe timer combines both retransmission timeout
         * and probe timeout in one bottle.                             --ANK
         */
        max_probes = sysctl_tcp_retries2;

        if (sk->dead) {
                int alive = ((tp->rto<<tp->backoff) < TCP_RTO_MAX);

                max_probes = tcp_orphan_retries(sk, alive);

                if (tcp_out_of_resources(sk, alive || tp->probes_out <= max_probes))
                        return;
        }

        if (tp->probes_out > max_probes) {
                tcp_write_err(sk);
        } else {
                /* Only send another probe if we didn't close things up. */
                tcp_send_probe0(sk);
        }
}



Analizziamo l'RTO handler tcp_write_timer() con parametro sk. Vediamo il codice. Come detto in precedenza,
in data passiamo un puntatore alla struct sock da gestire.


static void tcp_write_timer(unsigned long data)
        {
                struct sock *sk = (struct sock*)data;
                struct tcp_opt *tp = &sk->tp_pinfo.af_tcp;
                int event;

                /* 
		 * Operazione critica. Acquisiamo uno spinlock con la bh_lock_sock() definita
		 * come segue
		 *
		 * BH context may only use the following locking interface. */
		 * #define bh_lock_sock(__sk)	spin_lock(&((__sk)->lock.slock))
		 * #define bh_unlock_sock(__sk)	spin_unlock(&((__sk)->lock.slock)) 
		 */

                bh_lock_sock(sk);
                if (sk->lock.users) {
                        /* Try again later */
                        if (!mod_timer(&tp->retransmit_timer, jiffies + (HZ/20)))
                                sock_hold(sk);
                        goto out_unlock;
                }

		/*
                 * Il socket è in stato CLOSED? E che ci stiamo a fare qui? Ovviamente si salta a 
		 * out in questo caso. Stesso discorso se non sono schedulate ritrasmissioni.
                 */

                if (sk->state == TCP_CLOSE || !tp->pending)
                        goto out;

		/*
                 * Timeout > jiffies? Questo significa che il timer è andato in timeout.
		 * Aggiornare il timer è d'obbligo allora!
                 */

                if ((long)(tp->timeout - jiffies) > 0) {
                        if (!mod_timer(&tp->retransmit_timer, tp->timeout))
                                sock_hold(sk);
                        goto out;
                }

                event = tp->pending;
                tp->pending = 0;

                switch (event) {
                case TCP_TIME_RETRANS:

                        /* Eccolo qui RTO handling inizia qui */

                        tcp_retransmit_timer(sk);
                        break;
                case TCP_TIME_PROBE0:
                        tcp_probe_timer(sk);
                        break;
                }
                TCP_CHECK_TIMER(sk);

        out:
                tcp_mem_reclaim(sk);
        out_unlock:
                bh_unlock_sock(sk);
                sock_put(sk);
        }

        /*
         *      The TCP retransmit timer.
         */

        static void tcp_retransmit_timer(struct sock *sk)
        {
                struct tcp_opt *tp = &sk->tp_pinfo.af_tcp;

                /* Se non abbiamo packets in flight usciamo....l'unica cosa in flight è questo handler
                 * che non DEVE fare nulla! 8)
                 */

                if (tp->packets_out == 0)
                        goto out;

                BUG_TRAP(!skb_queue_empty(&sk->write_queue));

                /* Niente finestra (snd_wnd). Oltre a questo che significa sk->dead?! Qui Dave
                 * Miller una parolina ce la poteva anche buttare nei sorgenti....vabbè andiamo avanti!
                 * Inoltre lo stato deve essere diverso da TCP_SYN_SENT | TCP_SYN_RECV (penso a causa 
		 * del fatto che in questo caso ci sia un timer a parte di 75 secondi per la ricezione 
		 * del SYN|ACK o per il SYN...vedremo!)
                 */

                if (tp->snd_wnd == 0 && !sk->dead &&
                    !((1<<sk->state)&(TCPF_SYN_SENT|TCPF_SYN_RECV))) {
                        /* Receiver dastardly shrinks window. Our retransmits
                         * become zero probes, but we should not timeout this
                         * connection. If the socket is an orphan, time it out,
                         * we cannot allow such beasts to hang infinitely.
                         */

	        /* Saltiamo il codice di debug... */

        #ifdef TCP_DEBUG
                        if (net_ratelimit())
                                printk(KERN_DEBUG "TCP: Treason uncloaked! Peer %u.%u.%u.%u:%u/%u
                                                shrinks window %u:%u. Repaired.\n",
                                       NIPQUAD(sk->daddr), htons(sk->dport), sk->num,
                                       tp->snd_una, tp->snd_nxt);
        #endif

                        /* Che succede adesso? tcp_time_stamp (jiffies) ha superato
                         * rcv_tstamp di più di TCP_RTO_MAX...se non ricordo male
                         * tcp_write_err restituisce -ETIMEDOUT e mette il sk in
                         * stato CLOSED e cancella i timers.
                         */

                        if (tcp_time_stamp - tp->rcv_tstamp > TCP_RTO_MAX) {
                                tcp_write_err(sk);
                                goto out;
                        }

			/* Ecco qui il punto di ingresso..si cambia stato nella TCP state machine. Si entra 
			 * in stato Loss (vedi tcp_input.txt). Subito dopo si ritrasmette.
                         */

                        tcp_enter_loss(sk, 0);
                        tcp_retransmit_skb(sk, skb_peek(&sk->write_queue));
                        __sk_dst_reset(sk);
                        goto out_reset_timer;
                }

                if (tcp_write_timeout(sk))
                        goto out;

                /* retransmits = 'number of unrecovered RTO timeouts' */

                if (tp->retransmits == 0) {
                        if (tp->ca_state == TCP_CA_Disorder || tp->ca_state == TCP_CA_Recovery) {
                                if (tp->sack_ok) {
                                        if (tp->ca_state == TCP_CA_Recovery)
                                                NET_INC_STATS_BH(TCPSackRecoveryFail);
                                        else
                                                NET_INC_STATS_BH(TCPSackFailures);
                                } else {
                                        if (tp->ca_state == TCP_CA_Recovery)
                                                NET_INC_STATS_BH(TCPRenoRecoveryFail);
                                        else
                                                NET_INC_STATS_BH(TCPRenoFailures);
                                }
                        } else if (tp->ca_state == TCP_CA_Loss) {
			        NET_INC_STATS_BH(TCPLossFailures);
                        } else {
                                NET_INC_STATS_BH(TCPTimeouts);
                        }
                }

                tcp_enter_loss(sk, 0);

                if (tcp_retransmit_skb(sk, skb_peek(&sk->write_queue)) > 0) {
                        /* Retransmission failed because of local congestion,
                         * do not backoff.
                         */
                        if (!tp->retransmits)
                                tp->retransmits=1;
                        tcp_reset_xmit_timer(sk, TCP_TIME_RETRANS,
                                             min(tp->rto, TCP_RESOURCE_PROBE_INTERVAL));
                        goto out;
                }

                /* Increase the timeout each time we retransmit.  Note that
                 * we do not increase the rtt estimate.  rto is initialized
                 * from rtt, but increases here.  Jacobson (SIGCOMM 88) suggests
                 * that doubling rto each time is the least we can get away with.
                 * In KA9Q, Karn uses this for the first few times, and then
                 * goes to quadratic.  netBSD doubles, but only goes up to *64,
                 * and clamps at 1 to 64 sec afterwards.  Note that 120 sec is
                 * defined in the protocol as the maximum possible RTT.  I guess
                 * we'll have to use something other than TCP to talk to the
  		 * University of Mars.
                 *
                 * PAWS allows us longer timeouts and large windows, so once
                 * implemented ftp to mars will work nicely. We will have to fix
                 * the 120 second clamps though!
                 */

                tp->backoff++;
                tp->retransmits++;

        out_reset_timer:
                tp->rto = min(tp->rto << 1, TCP_RTO_MAX);
                tcp_reset_xmit_timer(sk, TCP_TIME_RETRANS, tp->rto);
                if (tp->retransmits > sysctl_tcp_retries1)
                        __sk_dst_reset(sk);

        out:;
        }

